#version 460
#extension GL_ARB_gpu_shader_int64 : enable

const int64_t alpha = 62;
const int64_t beta = -2;

layout(local_size_x = 64) in;

layout(binding = 0) readonly buffer input_buffer {
	uint64_t vec[];
} inputs[2];

layout(binding = 1) writeonly buffer output_buffer {
	uint64_t result[];
};

layout(push_constant) uniform constants {
	uint64_t length;
	uint64_t mod;
	uint64_t barrett_factor;
	uint64_t n;
};

void mul64(const uint64_t a, const uint64_t b,
		out uint64_t hi, out uint64_t lo) {
	const uint64_t lo_lo = (a & 0xFFFFFFFFu) * (b & 0xFFFFFFFFu);
	const uint64_t hi_lo = (a >> 32)         * (b & 0xFFFFFFFFu);
	const uint64_t lo_hi = (a & 0xFFFFFFFFu) * (b >> 32);
	const uint64_t hi_hi = (a >> 32)         * (b >> 32);

	const uint64_t cross = (lo_lo >> 32) + (hi_lo & 0xFFFFFFFFu) + lo_hi;
	hi = (hi_lo >> 32) + (cross >> 32) + hi_hi;
	lo = (cross << 32) | (lo_lo & 0xFFFFFFFFu);
}

uint64_t reduce64(const uint64_t lo) {
	const uint64_t num_c = lo >> (n + beta);

	uint64_t num_hi, num_lo;
	mul64(num_c, barrett_factor, num_hi, num_lo);

	uint64_t z = lo - num_hi * mod;
	if (z >= mod) {
		return z - mod;
	}
	return z;
}

uint64_t reduce128(const uint64_t hi, const uint64_t lo) {
	const uint64_t num_c = (hi << (64 - (n + beta))) + (lo >> (n + beta));

	uint64_t num_hi, num_lo;
	mul64(num_c, barrett_factor, num_hi, num_lo);

	uint64_t z = lo - num_hi * mod;
	if (z >= mod) {
		return z - mod;
	}
	return z;
}

void main() {
    if (gl_GlobalInvocationID.x >= length) {
        return;
    }

    uint pos = gl_GlobalInvocationID.x;

	uint64_t prod_hi, prod_lo;
	mul64(reduce64(inputs[0].vec[pos]), reduce64(inputs[1].vec[pos]),
		prod_hi, prod_lo);
	result[pos] = reduce128(prod_hi, prod_lo);
}
