#version 460
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 64) in;

layout(binding = 0) readonly buffer input_buffer {
	uint64_t operand[];
};

layout(binding = 1) writeonly buffer output_buffer {
	uint64_t result[];
};

layout(push_constant) uniform constants {
	uint64_t transform_size;
	uint64_t twiddle_factor;
	uint64_t barrett_factor;
	uint64_t mod;
};

void mul64(const uint64_t a, const uint64_t b, out uint64_t hi) {
	const uint64_t lo_lo = (a & 0xFFFFFFFFu) * (b & 0xFFFFFFFFu);
	const uint64_t hi_lo = (a >> 32)         * (b & 0xFFFFFFFFu);
	const uint64_t lo_hi = (a & 0xFFFFFFFFu) * (b >> 32);
	const uint64_t hi_hi = (a >> 32)         * (b >> 32);

	const uint64_t cross = (lo_lo >> 32) + (hi_lo & 0xFFFFFFFFu) + lo_hi;
	hi = (hi_lo >> 32) + (cross >> 32) + hi_hi;
}

void main() {
    if (gl_GlobalInvocationID.x >= transform_size) {
        return;
    }

    const uint pos = gl_GlobalInvocationID.x;

	const uint xidx = uint(pos);
	const uint yidx = uint(pos + transform_size);

	const uint64_t X = operand[xidx];
	const uint64_t Y = operand[yidx];

	uint64_t WY_hi;
	mul64(Y, barrett_factor, WY_hi);
	uint64_t WY = Y * twiddle_factor - WY_hi * mod;
	if (WY >= mod)
		WY = WY - mod;

	uint64_t temp_y = X;
	while (temp_y < WY) {
		temp_y += mod;
	}
	temp_y -= WY;

	result[xidx] = (X + WY) % mod;
	result[yidx] = temp_y % mod;
}
